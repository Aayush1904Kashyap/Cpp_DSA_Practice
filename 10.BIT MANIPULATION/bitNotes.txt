Theory:
-------
Bit manipulation is a technique in competitive programming that involves the manipulation of individual bits in the binary representations of numbers. It is valuable because it allows for efficient problem solving, often improving both time and memory performance.

Common Bitwise Operators:
--------------------------
- Bitwise AND (&): Sets each bit to 1 if both bits are 1.
- Bitwise OR (|): Sets each bit to 1 if one of two bits is 1.
- Bitwise XOR (^): Sets each bit to 1 if only one of two bits is 1.
- Bitwise NOT (~): Inverts all the bits.
- Left Shift (<<): Shifts bits to the left, filling with 0s.
- Right Shift (>>): Shifts bits to the right, discarding shifted bits.


Masks in Bit Manipulation
==========================

Theory:
-------
A mask is a binary pattern used to isolate or modify specific bits in a number. Masks are often created using bitwise shift operations and are crucial for tasks like setting, clearing, toggling, or checking specific bits.

How to Create and Use Masks:
----------------------------
1. Create a mask with 1 at position i:
   mask = (1 << i)
2. Use with AND to check/set/unset bits:
   number & mask     --> checks if bit is set
   number | mask     --> sets the bit
   number & ~mask    --> clears the bit
3. Use with XOR to toggle:
   number ^ mask     --> toggles the bit at position i

Example Pseudocode:
-------------------
i = 3
mask = (1 << i)  // 00001000

// Set bit at position 3
number = number | mask

// Clear bit at position 3
number = number & ~mask

// Toggle bit at position 3
number = number ^ mask

// Check if bit is set at position 3
if (number & mask) ≠ 0:
    Bit is set
else:
    Bit is unset




Extra Bit Manipulation Tricks
=============================

1. Multiply / Divide by Power of 2
----------------------------------
Intuition:
Left shift multiplies by 2^k because shifting left adds zero bits at the end.
Right shift divides by 2^k (floor division) because shifting right discards bits.

Pseudocode:
n << k   => Multiply n by 2^k
n >> k   => Divide n by 2^k (floor division)


2. Check if K-th Bit is Set (0-based)
-------------------------------------
Intuition:
AND with a mask where only k-th bit is 1. If result is non-zero, that bit was set.

Pseudocode:
if (n & (1 << k)) != 0:
    bit is set
else:
    bit is unset


3. Set the K-th Bit
-------------------
Intuition:
OR with a mask having k-th bit = 1 forces that bit to 1.

Pseudocode:
n = n | (1 << k)


4. Unset the K-th Bit
---------------------
Intuition:
AND with a mask where all bits are 1 except the k-th bit clears it.

Pseudocode:
n = n & ~(1 << k)


5. Toggle the K-th Bit
----------------------
Intuition:
XOR flips bits – if it’s 1 becomes 0, if it’s 0 becomes 1.

Pseudocode:
n = n ^ (1 << k)


6. Clear Bits from LSB to i-th (inclusive)
------------------------------------------
Intuition:
To clear bits up to i, create a mask with 0s in those positions, 1s elsewhere.

Pseudocode:
n = n & (~((1 << (i + 1)) - 1))


7. Clear Bits from MSB to i-th (inclusive)
------------------------------------------
Intuition:
To clear higher bits, keep only bits lower than i using a mask of (1 << i)-1.

Pseudocode:
n = n & ((1 << i) - 1)


8. Count Bits to Convert a to b
-------------------------------
Intuition:
Bits that differ between a and b will be 1 in XOR result. Count set bits.

Pseudocode:
diff = a ^ b
countSetBits(diff)


9. Generate All Subsets using Bitmask
-------------------------------------
Intuition:
For n elements, 0 to (1<<n)-1 represents all possible subsets.

Pseudocode:
for mask in range(0, (1 << n)):
    process(mask)


10. Check if Number is Power of Two
-----------------------------------
Intuition:
Power of two has exactly one set bit. So n & (n-1) == 0.

Pseudocode:
if n > 0 and (n & (n - 1)) == 0:
    it is power of two


11. Count Set Bits (Brian Kernighan's Algorithm)
------------------------------------------------
Intuition:
Each n & (n-1) removes the rightmost set bit. Count iterations.

Pseudocode:
count = 0
while n > 0:
    n = n & (n - 1)
    count++


12. Isolate Rightmost Set Bit
-----------------------------
Intuition:
n & -n gives only the lowest set bit, others cleared.

Pseudocode:
rightmost_bit = n & (-n)


13. Turn Off Rightmost Set Bit
------------------------------
Intuition:
n & (n-1) clears only the lowest set bit.

Pseudocode:
n = n & (n - 1)


14. Check Even/Odd
------------------
Intuition:
LSB decides even(0) or odd(1).

Pseudocode:
if n & 1:
    odd
else:
    even


15. Swap Two Numbers Without Temp
---------------------------------
Intuition:
XOR trick swaps without extra memory.

Pseudocode:
a = a ^ b
b = a ^ b
a = a ^ b


16. Fast Modulo by Power of 2
----------------------------
Intuition:
n % (2^k) is same as keeping only lower k bits.

Pseudocode:
n % (1 << k) == n & ((1 << k) - 1)
